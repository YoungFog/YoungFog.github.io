<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>两个有序序列的中位数---【最优解】</title>
      <link href="2021/04/10/liang-ge-you-xu-xu-lie-de-zhong-wei-shu-zui-you-jie/"/>
      <url>2021/04/10/liang-ge-you-xu-xu-lie-de-zhong-wei-shu-zui-you-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1.起因"></a>1.起因</h1><hr><p> 整个事件都是在我完成学校老师布置的一道实验题中发生<br>（题目在下一节中给出）</p><p>在第一次做时，我采用了一个<strong>半遍历</strong>的做法【时间O(n)，空间O(1)】，觉得已经完美了。<br>而后来舍友跟我说浙大一老哥用<strong>二分法</strong>做出来了【时间O(log2n)，空间O(1)】，让我觉得可以借鉴。</p><p>后来，老师却一直强调<strong>正确办法是新建一个A和B的并集，再从并集中找中位数</strong>。【时间O(2n)，空间O(2n)】<br>这简直让人匪夷所思呀，这不麻烦去了吗？老师是不是没用心做？</p><p>直到第二次实验，再仔细读题，发现题目上给的是增序序列！<br>之前的半遍历法和二分法统统不符合要求，没有考虑到<strong>重复元素会合并</strong>的特殊情况。</p><p>这样一想，老师的方法是对的。花里胡哨的优化，都被“审题”二字打倒。</p><p>但我不甘心如此复杂的做法呀，于是……</p><h1 id="2-可爱的题目"><a href="#2-可爱的题目" class="headerlink" title="2.可爱的题目"></a>2.可爱的题目</h1><hr><p>（2011年考研原题）</p><p>一个关键字为L（L&gt;=1）的升序序列S，处在第L/2(取整)个位置的数称为S的中位数。<br>例如，若序列S1=（11,13,15,17,19）则S1的中位数为15，若两个序列的中位数是含它们所有元素的升序序列的中位数。<br>例如，若S2=(2,4,6,8,20)，则S1和S2的中位数是11.<br>现在有两个<strong>等长升序序列</strong>A和B：<br>试设计一个在时间和空间两方面都尽可能高效的算法，找出两个序列A和B（组成的升序序列）的中位数。</p><h1 id="3-废弃的两种错误方法"><a href="#3-废弃的两种错误方法" class="headerlink" title="3.废弃的两种错误方法"></a>3.废弃的两种错误方法</h1><hr><p>1是一开始的想法，2是网上的目前最优解。<br>（错误原因是：没考虑到A和B合并后重复元素的影响）</p><h2 id="a-我的思路：半遍历法"><a href="#a-我的思路：半遍历法" class="headerlink" title="a. 我的思路：半遍历法"></a>a. 我的思路：半遍历法</h2><hr><p>让 i(初始化0) 和 j(初始化0) 分别遍历A和B进行循环<br> (循环条件为 <code>i + j &lt; len - 1</code>)<br>【等于len也可以，因为两数相等之后又取了一个更大的数，不影响取中位数】</p><p>a) 当<code>Data1[i] &gt; Data2[j]</code>时， <code>j++</code>;</p><p>b) 当<code>Data1[i] &lt; Data2[j]</code>时， <code>i++</code>;</p><p>c) 当<code>Data1[i] == Data2[j]</code>时，<code>i++</code>,<code>j++</code>;</p><p>此时，判断Data[i]或者Data[j]，谁小谁就是中位数。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/* Start to search */</span>i <span class="token operator">=</span> j <span class="token operator">=</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">GetLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// record the length</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// targets found</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">IndexSearch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> list2<span class="token punctuation">.</span><span class="token function">IndexSearch</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">IndexSearch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> list2<span class="token punctuation">.</span><span class="token function">IndexSearch</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Median of them is "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">IndexSearch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> list2<span class="token punctuation">.</span><span class="token function">IndexSearch</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">?</span> list1<span class="token punctuation">.</span><span class="token function">IndexSearch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">:</span> list2<span class="token punctuation">.</span><span class="token function">IndexSearch</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// the smaller one is the median</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="b-网上最优解：二分法"><a href="#b-网上最优解：二分法" class="headerlink" title="b.网上最优解：二分法"></a>b.网上最优解：二分法</h2><hr><p>分别求两个升序序列的 A、B 的中位数 a 和 b，<br>① 若 a = b, 则已找到两个序列的中位数，返回a<br>② 若 a &lt; b, 则舍弃序列 A 中较小的一半， 舍弃序列 B 中较大的一半（考虑奇数偶数）<br>③ 若 a &gt; b, 则舍弃序列 A 中较大的一半， 舍弃序列 B 中较小的一半 （考虑奇数偶数）<br>重复过程 ① 到 ③ 直到两个序列均只含一个元素为止，返回较小者</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">midNum2</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> s1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> d1 <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> d2 <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m1<span class="token punctuation">,</span> m2<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> s1 <span class="token operator">!=</span> d1 <span class="token operator">||</span> s2 <span class="token operator">!=</span> d2 <span class="token punctuation">)</span> <span class="token punctuation">{</span>        m1 <span class="token operator">=</span> <span class="token punctuation">(</span> s1 <span class="token operator">+</span> d1 <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        m2 <span class="token operator">=</span> <span class="token punctuation">(</span> s2 <span class="token operator">+</span> d2 <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> a<span class="token punctuation">[</span>m1<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>m2<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token punctuation">[</span>m1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> a<span class="token punctuation">[</span>m1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span>m2<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>s1 <span class="token operator">+</span> d1<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 元素个数为奇数</span>                s1 <span class="token operator">=</span> m1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保留中间点</span>                d2 <span class="token operator">=</span> m2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保留中间点</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 元素个数为偶数</span>                s1 <span class="token operator">=</span> m1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不保留中间点</span>                d2 <span class="token operator">=</span> m2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保留中间点</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>s2 <span class="token operator">+</span> d2<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 元素个数为奇数</span>                s2 <span class="token operator">=</span> m2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保留中间点</span>                d1 <span class="token operator">=</span> m1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保留中间点</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 元素个数为偶数</span>                s2 <span class="token operator">=</span> m2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不保留中间点</span>                d1 <span class="token operator">=</span> m1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保留中间点</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// end of while</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span> a<span class="token punctuation">[</span>s1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span>s2<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token operator">?</span> a<span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token punctuation">:</span> b<span class="token punctuation">[</span>s2<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//版权声明：本文为CSDN博主「QiaoDog」的原创文章，遵循CC 4.0 BY-SA版权协议。</span><span class="token comment" spellcheck="true">//原文链接：https://blog.csdn.net/tao20dage/article/details/88848197</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>而这两种方法都可以用以下反例证明错误：<br>A = { 1, 2, 3, 4 }      B = { 1, 2, 5, 6 }      A∪B = { 1, 2, 3, 4, 5, 6 }<br>这两种方法得到的结果都是2，而正确答案是3</p></blockquote><h1 id="4-力挽狂澜的突发奇想"><a href="#4-力挽狂澜的突发奇想" class="headerlink" title="4.力挽狂澜的突发奇想"></a>4.力挽狂澜的突发奇想</h1><hr><p>当发现题目是想要从A和B的并集中找中位数时，万念俱灰，难不成要接受那个复杂的做法了吗？<br>那个 “最优解” 二分法，只是不断的舍弃，却不能实现删除重复元素的操作。</p><p>但此时，我突然想起了我自己曾经的思路：半遍历……<br>于是我把循环条件的原理进行了一番深究：<br>起初，A[i]或者是B[j]代表最小的数；</p><p> <strong>(i + j)的实际意义就是最小的那个数在并集中移动的次数</strong>。</p><p>当走了 len - 1 次的时候，取A[i]和B[j]中最小值，即（不考虑重复元素时）A和B的中位数。</p><blockquote><p>后来考虑到了如果最后一步是A[i] == B[j]，则算走了len次，但因为取最小值，所以不影响结果。</p></blockquote><p>则此时， <strong>(&lt; len - 1)的实际意义就是最小的那个数到达中位数应当移动的次数。</strong></p><p>如果此时，将重复元素考虑进去，那么为了表示&lt;最小的那个数在并集中移动的次数&gt;和&lt;最小的那个数到达中位数应当移动的次数&gt;:<br>我引入了一个新的变量k，用于记录重复元素。<br>当 满足条件A[i] == B[j]后，多执行一条<code>k++;</code>  此时，<strong>记录变量k的数值相当于重复元素的个数</strong>。<br>（相当于并集的重复元素的删除操作，且不影响空间效率和时间效率）</p><p>于是：<br><strong>&lt;最小的那个数在并集中移动的次数&gt;可以用(i + j - k)来表示。</strong>【因为并集中重复元素不存在】<br><strong>&lt;最小的那个数到达中位数应当移动的次数&gt;可以用 ( &lt; ( len * 2 - k ) / 2 - 1 )来表示。</strong>【 ( 2 * len - k ) 就是 并集的实际长度】</p><p>至此，让我们再对之前思路进行修改：</p><p>让 i(初始化0) 和 j(初始化0) 分别遍历A和B进行循环<br> (循环条件为 <code>i + j - k &lt; (len * 2 - k) / 2 - 1</code><br>【等于(len * 2 - k) / 2也可以，因为两数相等之后又取了一个更大的数，不影响取中位数】</p><p>a) 当<code>A[i] &gt; B[j]</code>时， <code>j++</code>;</p><p>b) 当<code>A[i] &lt; B[j]</code>时， <code>i++</code>;</p><p>c) 当<code>A[i] == B[j]</code>时，<code>i++</code>;<code>j++</code>;<code>k++</code>;</p><p>此时，判断A[i]或者B[j]，谁小谁就是中位数。</p><h1 id="5-最优解的代码实现"><a href="#5-最优解的代码实现" class="headerlink" title="5.最优解的代码实现"></a>5.最优解的代码实现</h1><hr><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/* Start to search */</span>i <span class="token operator">=</span> j <span class="token operator">=</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// k For recording Duplicate numbers</span><span class="token keyword">int</span> len <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">GetLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j <span class="token operator">-</span> k <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> len<span class="token punctuation">)</span> <span class="token operator">-</span> k <span class="token punctuation">)</span><span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Targets found</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">IndexSearch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> list2<span class="token punctuation">.</span><span class="token function">IndexSearch</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">IndexSearch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> list2<span class="token punctuation">.</span><span class="token function">IndexSearch</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Median of them is "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">IndexSearch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> list2<span class="token punctuation">.</span><span class="token function">IndexSearch</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">?</span> list1<span class="token punctuation">.</span><span class="token function">IndexSearch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">:</span> list2<span class="token punctuation">.</span><span class="token function">IndexSearch</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// the smaller one is the median</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，整个答案的优化已经完成。</p><ul><li><strong>不需要考虑奇偶</strong></li><li><strong>考虑到了增序的不重复性，还不需要求并集</strong></li><li><strong>时间O(N) 空间O(1)</strong></li></ul><p>此时，这个方法是真真正正的最终完美答案！</p><h1 id="6-结语"><a href="#6-结语" class="headerlink" title="6.结语"></a>6.结语</h1><hr><p> 小小的变化，可以有多少种结果； 小小的改善，又隐藏多少的成长。</p><p>” 无限进步 “才是我们年轻人心里的信仰，对于那份稳重的热情，拥怀着走下去。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> 简单算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程风格总结</title>
      <link href="2020/11/21/bian-cheng-feng-ge-zong-jie/"/>
      <url>2020/11/21/bian-cheng-feng-ge-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  为什么风格重要？风格是你的<strong>审美观体现</strong>和<strong>专业性表现</strong>。</p><p>  先来说说什么叫<strong>审美观体现</strong>，“一串普普通通的代码，谈何美感”。每个人的审美观的确是不同的，但却是很容易改变的。每个人都曾会有那么一瞬间觉得——自己之前的作品、行为，是一种不成熟的表现。这其实并不是对与错的区别，而是自己审美观的提升。从一个“不懂得网络规则的小白”成长到一个“拥有自己特色的冲浪者”，是需要一定的审美积累的。创造优秀的作品的前提，一定是拥有了欣赏美的意识。</p><p>  接着，做这一行，最怕被说的就是不专业。而一眼就可看出的风格，恰恰就是你<strong>专业性</strong>的门面。说“没有感觉出专业到哪去”的，只是还没有形成这个意识当中。&lt;毕竟，只是同行才会纠结你专不专业，用户只在乎运行结果&gt;  让我们举个例子吧，刚刚接触调色的萌新应该都干过这么一件蠢事吧——拉高饱和度到过饱。的确，一张平平无奇的照片，当通过后期饱和度的处理后，瞬间变得丰富多彩，甚至超出了自然肉眼的范围。正当你觉得你沉浸在他人的夸赞中、自己很秀的时候，身边一定会有一个老手告诉你：你这过饱，看着好恶心呀！而当你去了解的更深时，才回头意识到自己的愚蠢错误。正如视频出现水印、做ppt全是黑体等等一样，永远都是专业的人能看出你错误，而非专业人士并不会看出这些细节——小却致命的细节。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>  好啊，说了这么多重要性，接下来就讲讲我目前对自己风格的一些总结吧！</p><p>(仅供参考，每个人都应该有各自的风格)</p><h2 id="1-命名风格"><a href="#1-命名风格" class="headerlink" title="1. 命名风格"></a>1. 命名风格</h2><p><strong>英文名词意识:</strong></p><p>如果说你要定义一个整形变量来表示高度<br>不要用<code>int gaodu</code>或是<code>int high</code>;<br>而是要<code>int height</code></p><p><strong>巧用大小写和关联意义:</strong></p><p>如果在我的程序里出现了<code>Str</code>和<code>ch</code><br>我会清楚地告诉你前者是字符数组，后者是字符变量</p><p><strong>注意做标记:</strong></p><p>如果Sum去表示总和<br><code>int iSum</code>和<code>float fSum</code>就可以帮助你在接下来引用时<br>时刻提醒自己用的是什么类型</p><p><strong>“_” 当空格:</strong></p><p>如果真的需要空格<br>比如在First.c文件中全局变量可以写成First_xxx来进行区分。<br>否则合作编程的时候容易出乱子</p><h2 id="2-行文风格"><a href="#2-行文风格" class="headerlink" title="2. 行文风格"></a>2. 行文风格</h2><p><strong>间距意识:</strong></p><blockquote><p>英文符号后一般要加空格</p></blockquote><p>如：<code>int a, b</code>而不是<code>int a,b</code> </p><blockquote><p>运算符和运算量之间要加空格</p></blockquote><p>如：<code>iSum = a + b;</code>而不是<code>iSum=a+b</code> </p><p><strong>标准意识:</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>显然是对的，但是不标准的。建议写成:</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重视类型:</strong></p><p><code>float a = 0;</code> 应该写成 <code>float a = 0.0f;</code><br><code>double x = 0;</code> 则写成<code>double x = 0.0 ;</code> </p><blockquote><p>不要过于主观给主函数化妆，最标准的主函数写法主要有两种：</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以及</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>声明意识:</strong></p><blockquote><p>头文件声明、宏定义声明、自定义函数声明、全局变量声明 一定要依次有序地放在最开始</p></blockquote><p><strong>对关键步骤一定要做注释:</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义变换符号使用的变量 </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-工程意识"><a href="#3-工程意识" class="headerlink" title="3. 工程意识"></a>3. 工程意识</h2><blockquote><p>编程是一个在效率和工程量之间做衡量的事情，一切都要以实际为根本。</p></blockquote><ul><li><p>效率问题</p></li><li><p>工程量问题</p></li></ul><h2 id="4-注释意识"><a href="#4-注释意识" class="headerlink" title="4. 注释意识"></a>4. 注释意识</h2><blockquote><p>一定要养成在文件最开头写文件说明的习惯！</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//File name  :Date_Sort</span><span class="token comment" spellcheck="true">//Author     :YoungFog</span><span class="token comment" spellcheck="true">//Date       :2020.11.21</span><span class="token comment" spellcheck="true">//Function   :Data Management</span><span class="token comment" spellcheck="true">//Parameter  :0--Success, 1--Failure</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>  我们总结了这么多规范性风格和个性化风格，没有硬性规定，但一定要在平时注重风格。</p><p>  也许未来我们在企业中会去学习新的风格规范，来达到“便于交流”的最终合作目的。如果我们自己都没有把这份孤僻的事业当成一种热爱的艺术，又怎会说出那句最初的<code>HELLO WORLD</code>？又怎会令初心皈依自己未来的生活？</p><p>  因为我们每个人都是这条道路的开拓者，风格难道不就是我们走过的最好证明吗?</p><p>​                                                                                                                                             写于2020.11.21<br>​                                                                                         一个仅有2个月编程经验却怀揣梦想的大一新生</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
            <tag> 初来乍到 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
